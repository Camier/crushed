# https://taskfile.dev

version: "3"

env:
  CGO_ENABLED: 0
  GOSUMDB: sum.golang.org
  GOTOOLCHAIN: go1.25.0

tasks:
  lint:install:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
    env:
      GOTOOLCHAIN: go1.25.0

  lint:
    desc: Run base linters
    cmds:
      - |
          set -euo pipefail
          LINT_BIN="$(command -v golangci-lint || true)"
          if [ -z "$LINT_BIN" ]; then
            GOBIN_PATH="$(go env GOBIN)"
            if [ -n "$GOBIN_PATH" ] && [ -x "$GOBIN_PATH/golangci-lint" ]; then
              LINT_BIN="$GOBIN_PATH/golangci-lint"
            fi
          fi
          if [ -z "$LINT_BIN" ]; then
            GOPATH_BIN="$(go env GOPATH)/bin/golangci-lint"
            if [ -x "$GOPATH_BIN" ]; then
              LINT_BIN="$GOPATH_BIN"
            fi
          fi
          if [ -z "$LINT_BIN" ]; then
            echo "golangci-lint not found; run 'task lint:install' or add it to PATH" >&2
            exit 1
          fi
          "$LINT_BIN" run --path-mode=abs --config=".golangci.yml" --timeout=5m
    env:
      GOEXPERIMENT: null

  lint-fix:
    desc: Run base linters and fix issues
    cmds:
      - |
          set -euo pipefail
          LINT_BIN="$(command -v golangci-lint || true)"
          if [ -z "$LINT_BIN" ]; then
            GOBIN_PATH="$(go env GOBIN)"
            if [ -n "$GOBIN_PATH" ] && [ -x "$GOBIN_PATH/golangci-lint" ]; then
              LINT_BIN="$GOBIN_PATH/golangci-lint"
            fi
          fi
          if [ -z "$LINT_BIN" ]; then
            GOPATH_BIN="$(go env GOPATH)/bin/golangci-lint"
            if [ -x "$GOPATH_BIN" ]; then
              LINT_BIN="$GOPATH_BIN"
            fi
          fi
          if [ -z "$LINT_BIN" ]; then
            echo "golangci-lint not found; run 'task lint:install' or add it to PATH" >&2
            exit 1
          fi
          "$LINT_BIN" run --path-mode=abs --config=".golangci.yml" --timeout=5m --fix
    env:
      GOEXPERIMENT: null

  fmt:install:
    desc: Install gofumpt
    cmds:
      - go install mvdan.cc/gofumpt@latest
    env:
      GOTOOLCHAIN: go1.25.0

  bootstrap:
    desc: Install common development tooling
    deps:
      - lint:install
      - fmt:install

  build:
    desc: Run build
    cmds:
      - mkdir -p bin
      - go build -o bin/crush .
    generates:
      - bin/crush

  clean:
    desc: Remove build artifacts
    cmds:
      - rm -rf bin
      - rm -rf dist

  build:release:
    desc: Build release artifacts with Goreleaser (snapshot)
    cmds:
      - goreleaser build --snapshot --clean

  build:snapshot:min:
    desc: Build minimal cross-platform tarballs (Linux/macOS, amd64/arm64)
    cmds:
      - scripts/build-snapshot.sh

  test:
    desc: Run tests
    cmds:
      - go test ./... {{.CLI_ARGS}}

  test:update:
    desc: Update golden snapshots
    cmds:
      - |
          set -euo pipefail
          # Find packages that import golden and update only those
          PKG_DIRS=$(rg -l --hidden --no-messages 'github.com/charmbracelet/x/exp/golden' | xargs -r -n1 dirname | sort -u)
          if [ -z "${PKG_DIRS:-}" ]; then
            echo "No golden-using packages found" >&2
            exit 0
          fi
          for d in $PKG_DIRS; do
            echo "Updating goldens in $d" >&2
            ( cd "$d" && go test -update {{.CLI_ARGS}} )
          done

  test:update:chat:
    desc: Update chat page golden snapshots
    cmds:
      - go test ./internal/tui/page/chat -run TestChatPage -update {{.CLI_ARGS}}

  test:update:splash:
    desc: Update splash golden snapshots
    cmds:
      - go test ./internal/tui/components/chat/splash -update {{.CLI_ARGS}}

  test:update:header:
    desc: Update header golden snapshots
    cmds:
      - go test ./internal/tui/components/chat/header -update {{.CLI_ARGS}}

  test:race:
    desc: Run tests with the race detector
    env:
      CGO_ENABLED: 1
    cmds:
      - go test -race ./internal/tui/page/chat ./internal/tui/components/chat/editor ./internal/fsext ./internal/tui/exp/list {{.CLI_ARGS}}

  fmt:
    desc: Run gofumpt
    cmds:
      - |
          set -euo pipefail
          FMT_BIN="$(command -v gofumpt || true)"
          if [ -z "$FMT_BIN" ]; then
            GOBIN_PATH="$(go env GOBIN)"
            if [ -n "$GOBIN_PATH" ] && [ -x "$GOBIN_PATH/gofumpt" ]; then
              FMT_BIN="$GOBIN_PATH/gofumpt"
            fi
          fi
          if [ -z "$FMT_BIN" ]; then
            GOPATH_BIN="$(go env GOPATH)/bin/gofumpt"
            if [ -x "$GOPATH_BIN" ]; then
              FMT_BIN="$GOPATH_BIN"
            fi
          fi
          if [ -z "$FMT_BIN" ]; then
            echo "gofumpt not found; run 'task fmt:install' or add it to PATH" >&2
            exit 1
          fi
          "$FMT_BIN" -w .

  dev:
    desc: Run with profiling enabled
    env:
      CRUSH_PROFILE: true
      GOEXPERIMENT: greenteagc
    cmds:
      - go run .


  install:
    desc: Install the application
    cmds:
      - go install -v .

  profile:cpu:
    desc: 10s CPU profile
    cmds:
      - go tool pprof -http :6061 'http://localhost:6060/debug/pprof/profile?seconds=10'

  profile:heap:
    desc: Heap profile
    cmds:
      - go tool pprof -http :6061 'http://localhost:6060/debug/pprof/heap'

  profile:allocs:
    desc: Allocations profile
    cmds:
      - go tool pprof -http :6061 'http://localhost:6060/debug/pprof/allocs'

  schema:
    desc: Generate JSON schema for configuration
    cmds:
      - go run main.go schema > schema.json
      - echo "Generated schema.json"
    generates:
      - schema.json
